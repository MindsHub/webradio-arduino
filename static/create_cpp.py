import os
import re

try:
    import minify_html
except ImportError:
    import subprocess
    import sys
    print(f"Installing minify-html for PlatformIO environment at {sys.executable}")
    subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'minify-html'])
    import minify_html

VARIABLE_REGEX = r"([_a-zA-Z][_a-zA-Z0-9]*)\s*__attribute__\s*\(\s*\(\s*static_file\s*\(\s*\"([^\)]+)\"\s*\)\s*\)\s*\)"
HPP_FILE = "static_resources.hpp"
CPP_FILE = "static_resources.cpp"
RAW_STRING_WRAPPER = "rawStringWrapper"
STATIC_DIR = os.path.realpath("./static/") + "/"

variables = []
with open("include/" + HPP_FILE) as f:
    for line in f:
        m = re.search(VARIABLE_REGEX, line)
        if m:
            variables.append((m.group(1), m.group(2)))

res = f"// AUTOGENERATED BY static/create_cpp.py, DO NOT EDIT\n\n#include \"{HPP_FILE}\"\n\n#include <Arduino.h>\n\n"
for varname, filename in variables:
    print(f"Generating variable {varname} from file {filename}")
    filename = os.path.realpath(STATIC_DIR + filename)
    if os.path.commonprefix((filename, STATIC_DIR)) != STATIC_DIR:
        print("Only files under the static/ folder should be included")
        exit(1)

    with open(filename) as f:
        content = f.read()
    if filename.endswith(".html"):
        content = minify_html.minify(content)

    res += f"const char * {varname} PROGMEM = R\"{RAW_STRING_WRAPPER}({content}){RAW_STRING_WRAPPER}\";\n"

with open("src/" + CPP_FILE, "w") as f:
    f.write(res)
